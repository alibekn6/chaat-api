#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ AI —Å–∏—Å—Ç–µ–º—ã
–ó–∞–ø—É—Å–∫–∞—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–±–ª–µ–º
"""

import os
import sys
import asyncio
from pathlib import Path
from datetime import datetime
import traceback

async def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("=== üåç –ü–†–û–í–ï–†–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===")
    
    required_vars = {
        "OPENAI_API_KEY": "OpenAI API –¥–ª—è embeddings –∏ chat completion",
        "DATABASE_URL": "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL",
    }
    
    optional_vars = {
        "BOT_TOKEN": "Telegram bot token (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)",
        "CHROMA_DB_PATH": "–ü—É—Ç—å –∫ ChromaDB (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: db/chroma_db)",
    }
    
    issues = []
    
    for var, description in required_vars.items():
        value = os.getenv(var)
        if not value:
            print(f"‚ùå {var}: –ù–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–ê - {description}")
            issues.append(f"Missing {var}")
        else:
            # –ú–∞—Å–∫–∏—Ä—É–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏
            if "KEY" in var or "TOKEN" in var:
                masked = value[:8] + "..." + value[-4:] if len(value) > 12 else "***"
                print(f"‚úÖ {var}: {masked}")
            else:
                print(f"‚úÖ {var}: {value}")
    
    for var, description in optional_vars.items():
        value = os.getenv(var)
        if value:
            if "KEY" in var or "TOKEN" in var:
                masked = value[:8] + "..." + value[-4:] if len(value) > 12 else "***"
                print(f"‚úÖ {var}: {masked}")
            else:
                print(f"‚úÖ {var}: {value}")
        else:
            print(f"‚ö†Ô∏è  {var}: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) - {description}")
    
    return issues


async def check_directories():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
    print("\n=== üìÅ –ü–†–û–í–ï–†–ö–ê –î–ò–†–ï–ö–¢–û–†–ò–ô ===")
    
    directories = {
        "db/chroma_db": "ChromaDB –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö",
        "temp_knowledge_bases": "–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ PDF —Ñ–∞–π–ª–æ–≤",
        "temp_bots": "–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±–æ—Ç—ã",
        "src/ai/templates": "–®–∞–±–ª–æ–Ω—ã –±–æ—Ç–æ–≤",
    }
    
    issues = []
    
    for dir_path, description in directories.items():
        path = Path(dir_path)
        
        if not path.exists():
            print(f"‚ùå {dir_path}: –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ - {description}")
            try:
                path.mkdir(parents=True, exist_ok=True)
                print(f"‚úÖ {dir_path}: –°–û–ó–î–ê–ù–ê")
            except Exception as e:
                print(f"‚ùå {dir_path}: –û–®–ò–ë–ö–ê –°–û–ó–î–ê–ù–ò–Ø - {e}")
                issues.append(f"Cannot create {dir_path}")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
            if path.is_dir():
                try:
                    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
                    test_file = path / f"test_write_{datetime.now().timestamp()}"
                    test_file.touch()
                    test_file.unlink()
                    print(f"‚úÖ {dir_path}: –î–û–°–¢–£–ü–ù–ê (—á—Ç–µ–Ω–∏–µ/–∑–∞–ø–∏—Å—å)")
                except Exception as e:
                    print(f"‚ùå {dir_path}: –ù–ï–¢ –ü–†–ê–í –ó–ê–ü–ò–°–ò - {e}")
                    issues.append(f"No write permission for {dir_path}")
            else:
                print(f"‚ùå {dir_path}: –ù–ï –î–ò–†–ï–ö–¢–û–†–ò–Ø")
                issues.append(f"{dir_path} is not a directory")
    
    return issues


async def check_openai_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OpenAI API"""
    print("\n=== ü§ñ –ü–†–û–í–ï–†–ö–ê OPENAI API ===")
    
    try:
        import openai
        
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            print("‚ùå OpenAI API key –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return ["OpenAI API key missing"]
        
        client = openai.AsyncOpenAI(api_key=api_key)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é OpenAI API...")
        response = await client.chat.completions.create(
            model="gpt-4o-mini",
            messages=[{"role": "user", "content": "Hello, test message"}],
            max_tokens=10
        )
        
        print("‚úÖ OpenAI Chat API: –†–ê–ë–û–¢–ê–ï–¢")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º embeddings
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é OpenAI Embeddings...")
        embeddings_response = await client.embeddings.create(
            model="text-embedding-3-small",
            input=["test text for embeddings"]
        )
        
        print("‚úÖ OpenAI Embeddings API: –†–ê–ë–û–¢–ê–ï–¢")
        print(f"   –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å embedding: {len(embeddings_response.data[0].embedding)}")
        
        return []
        
    except Exception as e:
        print(f"‚ùå OpenAI API: –û–®–ò–ë–ö–ê - {e}")
        print(f"   Traceback: {traceback.format_exc()}")
        return [f"OpenAI API error: {str(e)}"]


async def check_chromadb():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç ChromaDB"""
    print("\n=== üîç –ü–†–û–í–ï–†–ö–ê CHROMADB ===")
    
    try:
        import chromadb
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—Ç –∂–µ –ø—É—Ç—å —á—Ç–æ –∏ –≤ –∫–æ–¥–µ
        chroma_path = "db/chroma_db"
        print(f"üîÑ –ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ ChromaDB: {chroma_path}")
        
        client = chromadb.PersistentClient(path=chroma_path)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collections = client.list_collections()
        print(f"‚úÖ ChromaDB –ø–æ–¥–∫–ª—é—á–µ–Ω–∞: {len(collections)} –∫–æ–ª–ª–µ–∫—Ü–∏–π")
        
        for collection in collections:
            print(f"   üìö –ö–æ–ª–ª–µ–∫—Ü–∏—è: {collection.name}")
            count = collection.count()
            print(f"      –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {count}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        test_collection_name = f"test_collection_{datetime.now().timestamp()}"
        try:
            test_collection = client.create_collection(name=test_collection_name)
            test_collection.add(
                embeddings=[[1.0, 2.0, 3.0]],
                documents=["test document"],
                ids=["test_id"]
            )
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
            results = test_collection.query(
                query_embeddings=[[1.0, 2.0, 3.0]],
                n_results=1
            )
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
            client.delete_collection(name=test_collection_name)
            
            print("‚úÖ ChromaDB –æ–ø–µ—Ä–∞—Ü–∏–∏: –†–ê–ë–û–¢–ê–Æ–¢")
            
        except Exception as e:
            print(f"‚ùå ChromaDB —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: –û–®–ò–ë–ö–ê - {e}")
            return [f"ChromaDB test failed: {str(e)}"]
        
        return []
        
    except Exception as e:
        print(f"‚ùå ChromaDB: –û–®–ò–ë–ö–ê - {e}")
        print(f"   Traceback: {traceback.format_exc()}")
        return [f"ChromaDB error: {str(e)}"]


async def check_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("\n=== üóÑÔ∏è –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–• ===")
    
    try:
        from src.database import get_async_db
        from src.bots.crud import get_bot
        from sqlalchemy import text
        
        async for db in get_async_db():
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            result = await db.execute(text("SELECT 1"))
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –ü–û–î–ö–õ–Æ–ß–ï–ù–ê")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            tables_result = await db.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                AND table_name IN ('bots', 'users')
            """))
            
            tables = [row[0] for row in tables_result.fetchall()]
            print(f"‚úÖ –¢–∞–±–ª–∏—Ü—ã –Ω–∞–π–¥–µ–Ω—ã: {tables}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ bots
            columns_result = await db.execute(text("""
                SELECT column_name 
                FROM information_schema.columns 
                WHERE table_name = 'bots'
                AND column_name IN ('bot_type', 'knowledge_base_status')
            """))
            
            columns = [row[0] for row in columns_result.fetchall()]
            if 'bot_type' in columns and 'knowledge_base_status' in columns:
                print("‚úÖ –ù–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: bot_type, knowledge_base_status –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print(f"‚ö†Ô∏è  –ù–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏: –Ω–∞–π–¥–µ–Ω—ã —Ç–æ–ª—å–∫–æ {columns}")
                print("   –í–æ–∑–º–æ–∂–Ω–æ –Ω—É–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é: alembic upgrade head")
            
            break
        
        return []
        
    except Exception as e:
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: –û–®–ò–ë–ö–ê - {e}")
        print(f"   Traceback: {traceback.format_exc()}")
        return [f"Database error: {str(e)}"]


async def check_pdf_processing():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç PDF –æ–±—Ä–∞–±–æ—Ç–∫—É"""
    print("\n=== üìÑ –ü–†–û–í–ï–†–ö–ê PDF –û–ë–†–ê–ë–û–¢–ö–ò ===")
    
    try:
        import PyPDF2
        from langchain_text_splitters import RecursiveCharacterTextSplitter
        
        print("‚úÖ PyPDF2: –ò–ú–ü–û–†–¢ OK")
        print("‚úÖ langchain_text_splitters: –ò–ú–ü–û–†–¢ OK")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º text splitter
        splitter = RecursiveCharacterTextSplitter(
            chunk_size=1000,
            chunk_overlap=100,
            length_function=len,
        )
        
        test_text = "This is a test document. " * 100  # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
        chunks = splitter.split_text(test_text)
        
        print(f"‚úÖ Text splitting: {len(chunks)} chunks —Å–æ–∑–¥–∞–Ω–æ")
        
        return []
        
    except Exception as e:
        print(f"‚ùå PDF –æ–±—Ä–∞–±–æ—Ç–∫–∞: –û–®–ò–ë–ö–ê - {e}")
        print(f"   Traceback: {traceback.format_exc()}")
        return [f"PDF processing error: {str(e)}"]


async def check_templates():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —à–∞–±–ª–æ–Ω—ã –±–æ—Ç–æ–≤"""
    print("\n=== üìã –ü–†–û–í–ï–†–ö–ê –®–ê–ë–õ–û–ù–û–í ===")
    
    try:
        from src.ai.generator import load_template
        
        templates = [
            "qa_bot_template.py",
            "simple_chat_template.py"
        ]
        
        issues = []
        
        for template_name in templates:
            try:
                template_content = load_template(template_name)
                if "{{BOT_ID}}" in template_content:
                    print(f"‚úÖ {template_name}: –ù–ê–ô–î–ï–ù –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã")
                else:
                    print(f"‚ö†Ô∏è  {template_name}: –Ω–∞–π–¥–µ–Ω –Ω–æ –ù–ï–¢ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤")
                    issues.append(f"Template {template_name} missing placeholders")
            except Exception as e:
                print(f"‚ùå {template_name}: –û–®–ò–ë–ö–ê - {e}")
                issues.append(f"Template {template_name} error: {str(e)}")
        
        return issues
        
    except Exception as e:
        print(f"‚ùå –°–∏—Å—Ç–µ–º–∞ —à–∞–±–ª–æ–Ω–æ–≤: –û–®–ò–ë–ö–ê - {e}")
        return [f"Template system error: {str(e)}"]


async def run_comprehensive_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"""
    print("\n=== üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–´–ô –¢–ï–°–¢ ===")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Å–æ–∑–¥–∞–Ω–∏—è –∑–Ω–∞–Ω–∏–π
        from src.ai.knowledge import chroma_client
        from src.ai.generator import _get_knowledge_base_preview
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
        test_bot_id = 99999
        collection_name = f"bot_{test_bot_id}_kb"
        
        # –£–¥–∞–ª—è–µ–º –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            chroma_client.delete_collection(name=collection_name)
        except:
            pass
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
        collection = chroma_client.create_collection(
            name=collection_name,
            metadata={"bot_id": test_bot_id}
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        import openai
        client = openai.AsyncOpenAI(api_key=os.getenv("OPENAI_API_KEY"))
        
        test_docs = [
            "Our company provides excellent customer service.",
            "We offer 24/7 support to all our customers.",
            "Our products are high quality and affordable."
        ]
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º embeddings
        embeddings_response = await client.embeddings.create(
            model="text-embedding-3-small",
            input=test_docs
        )
        
        embeddings = [emb.embedding for emb in embeddings_response.data]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é
        collection.add(
            embeddings=embeddings,
            documents=test_docs,
            ids=[f"test_doc_{i}" for i in range(len(test_docs))]
        )
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫
        query_response = await client.embeddings.create(
            model="text-embedding-3-small",
            input=["customer service"]
        )
        
        results = collection.query(
            query_embeddings=[query_response.data[0].embedding],
            n_results=2
        )
        
        print(f"‚úÖ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(results['documents'][0])} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º preview
        try:
            preview = await _get_knowledge_base_preview(test_bot_id)
            print(f"‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è preview: {len(preview)} —Å–∏–º–≤–æ–ª–æ–≤")
        except Exception as e:
            print(f"‚ö†Ô∏è  Preview –≥–µ–Ω–µ—Ä–∞—Ü–∏—è: –û–®–ò–ë–ö–ê - {e}")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
        chroma_client.delete_collection(name=collection_name)
        print("‚úÖ –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        return []
        
    except Exception as e:
        print(f"‚ùå –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç: –û–®–ò–ë–ö–ê - {e}")
        print(f"   Traceback: {traceback.format_exc()}")
        return [f"Comprehensive test failed: {str(e)}"]


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê AI –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    all_issues = []
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    issues = await check_environment()
    all_issues.extend(issues)
    
    issues = await check_directories()
    all_issues.extend(issues)
    
    issues = await check_database()
    all_issues.extend(issues)
    
    issues = await check_openai_connection()
    all_issues.extend(issues)
    
    issues = await check_chromadb()
    all_issues.extend(issues)
    
    issues = await check_pdf_processing()
    all_issues.extend(issues)
    
    issues = await check_templates()
    all_issues.extend(issues)
    
    # –ï—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ—à–ª–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç
    if not all_issues:
        issues = await run_comprehensive_test()
        all_issues.extend(issues)
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 50)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    
    if not all_issues:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("   AI —Å–∏—Å—Ç–µ–º–∞ –¥–æ–ª–∂–Ω–∞ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    else:
        print(f"‚ùå –ù–ê–ô–î–ï–ù–û {len(all_issues)} –ü–†–û–ë–õ–ï–ú:")
        for i, issue in enumerate(all_issues, 1):
            print(f"   {i}. {issue}")
        
        print("\nüîß –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        if any("OpenAI" in issue for issue in all_issues):
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
            print("   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É API key –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ gpt-4o-mini –∏ text-embedding-3-small")
        
        if any("ChromaDB" in issue for issue in all_issues):
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ db/chroma_db/")
            print("   - –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –¥–∏—Å–∫ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω")
        
        if any("Database" in issue for issue in all_issues):
            print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL")
            print("   - –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: alembic upgrade head")
        
        if any("permission" in issue.lower() for issue in all_issues):
            print("   - –ò—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: chown -R appuser:appuser /app/")


if __name__ == "__main__":
    asyncio.run(main()) 